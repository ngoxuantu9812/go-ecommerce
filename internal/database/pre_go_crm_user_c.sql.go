// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: pre_go_crm_user_c.sql

package database

import (
	"context"
)

const getUserByEmailSQLC = `-- name: GetUserByEmailSQLC :one
select usr_id, usr_email, usr_phone, usr_username, usr_password, usr_created_at, usr_updated_at, usr_create_ip_at, usr_last_login_at, usr_last_login_ip_at, usr_login_times, usr_status from ` + "`" + `pre_go_crm_user_c` + "`" + ` where usr_email = ? limit 1
`

func (q *Queries) GetUserByEmailSQLC(ctx context.Context, usrEmail string) (PreGoCrmUserC, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmailSQLC, usrEmail)
	var i PreGoCrmUserC
	err := row.Scan(
		&i.UsrID,
		&i.UsrEmail,
		&i.UsrPhone,
		&i.UsrUsername,
		&i.UsrPassword,
		&i.UsrCreatedAt,
		&i.UsrUpdatedAt,
		&i.UsrCreateIpAt,
		&i.UsrLastLoginAt,
		&i.UsrLastLoginIpAt,
		&i.UsrLoginTimes,
		&i.UsrStatus,
	)
	return i, err
}

const updateUserStatusByUserId = `-- name: UpdateUserStatusByUserId :exec
update ` + "`" + `pre_go_crm_user_c` + "`" + `
set usr_status = $2,
    usr_udpated_at = $3
where usr_id = $1
`

func (q *Queries) UpdateUserStatusByUserId(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, updateUserStatusByUserId)
	return err
}
